datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "edge" // Add this line to enable edge compatibility
}

model License {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model CombatProfile {
  id                Int      @id @default(autoincrement())
  type              String   @default("queue")
  name              String
  data              Json
  ui                Json
  talents           String?
  userId            Int
  ownerId           Int
  originalProfileId Int? // Nullable initially
  sharable          Boolean
  sellable          Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  password        String
  role            String          @default("user")
  twoFactorSecret String? // Store TOTP secret
  is2FAEnabled    Boolean         @default(false) // Flag to check if 2FA is enabled
  is2FAVerified   Boolean         @default(false) // Flag to check if 2FA is verified
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  License         License[]
  CombatProfile   CombatProfile[]
  products        Product[]       @relation("UserCreatedProducts") // Link to products created by the user
  reviews         Review[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  image       String? // Image URL or file reference for the PLP image
  creatorId   Int // Link to the user who created the product
  creator     User     @relation("UserCreatedProducts", fields: [creatorId], references: [id]) // Reverse relation
  tags        Tag[]    @relation("ProductTags") // Use tags instead of categories
  badges      Badge[]  @relation("ProductBadges")
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("ProductTags")
}

model Badge {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("ProductBadges")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int // Rating between 1 and 5
  comment   String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
